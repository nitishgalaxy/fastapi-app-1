FASTAPI - Tutorial
----------------------

https://www.youtube.com/watch?v=7t2alSnE2-I

https://github.com/bitfumes/fastapi-course


FastAPI Features:
------------------------

1. Automatic documentation - 
    i.    Swagger UI
            - Postman not needed.

    ii.   ReDoc


2. Uses modern features of Python 
    - Python 3.6 with type hints 
    - Pydantic library - provides typing system


3. Based on open standards
    - JSON schema - By default return JSON
    - Open API : Under Linux foundation which defines standards to create API.


4. Autocomplete in VSCode and Pycharm - due to pydantic typing system.

5. Security and Authentication
    i. HTTP Basic 
    ii. OAuth2 (also with JWT tokens)
    iii. API keys in 
        a. Headers 
        b. Query Parameters
        c. Cookies 


6. Dependency Injection 

7. Unlimited Plugins 

8. Testing 


9. FastAPI uses Startlette 
    Starlette Features 
        i. Websocket Support 
        ii. GraphQL Support 
        iii. In-process background tasks 
        iv. Startup and shutdown events 



Other Supports:

1. SQL databases 
2. NoSQL databases
3. GraphQL 


-----------------------------------

Python3.6+


python3 -m venv fastapi-env

pip install fastapi

pip install --upgrade pip

pip install uvicorn

> uvicorn main:app --reload 




main.py 
-------------

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
def index():
    # Return String
    #return "heyy"

    # Return dict which will get converteed to json
    return {"hello": "world"}


@app.get("/about")
def about():
    return {"data": "about page"}





Launch Swagger:
-----------------------

http://127.0.0.1:8000/docs



Launch ReDoc 
-----------------------

http://127.0.0.1:8000/redoc



Path Parameters:
------------------------

@app.get("/blog/{id}")
def show(id):
    # id is string here
    return {"data": id} 


@app.get("/blog/{id}/comments")
def comments(id : int):
    # Use hints to enforce data type of ID as int
    return {"comments": id} 



Query Parameters:
----------------------

from typing import Optional


@app.get("/blog")
def blog(limit=10, published:bool = True, sort:Optional[str]=None):

    return {"data": f"limit={limit}  published={published} sort={sort}"}



limit=10   # Default value 
sort:Optional[str]=None   # Optional value 



Request Body 
-------------------

from pydantic import BaseModel

class Blog(BaseModel):
    title: str 
    body: str 
    published: Optional[bool]


'''
@app.post("/blog")
def create_blog(request: Blog):
    return request
'''

@app.post("/blog")
def create_blog(blog: Blog):
    return {'data': f"Blog is created with title as {blog.title}"}




Debugging:
--------------

1. Set breakpoint 
2. Ctrl + Shift + P > Debug: Start Debugging > FastAPI 


Running on different Port:
-------------------------------

import uvicorn

if __name__ == '__main__':
    uvicorn.run(app, host="127.0.0.1", port=9000)


> python main.py 




main.py 
---------------

from fastapi import FastAPI
from typing import Optional
from pydantic import BaseModel
import uvicorn


app = FastAPI()


@app.get("/")
def index():
    # Return String
    #return "heyy"

    # Return dict which will get converteed to json
    return {"hello": "world"}


@app.get("/about")
def about():
    return {"data": "about page"}


@app.get("/blog/{id}")
def show(id):
    # id is string here
    return {"data": id} 


@app.get("/blog/{id}/comments")
def comments(id : int):
    # Use hints to enforce data type of ID as int
    return {"comments": id} 


@app.get("/blog")
def blog(limit=10, published:bool = True, sort:Optional[str]=None):

    return {"data": f"limit={limit}  published={published} sort={sort}"}


class Blog(BaseModel):
    title: str 
    body: str 
    published: Optional[bool]


'''
@app.post("/blog")
def create_blog(request: Blog):
    return request
'''

@app.post("/blog")
def create_blog(blog: Blog):
    return {'data': f"Blog is created with title as {blog.title}"}


if __name__ == '__main__':
    uvicorn.run(app, host="127.0.0.1", port=9000)



===============================================================================================


SQLAlchemy  = ORM = Object Relational Mapping 

e.g. SQLAlchemy is mapping 'Pet' class in python to the 'pet' relation (table) in the database.


Create Database connection:


database.py 
---------------

from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker

SQLALCHAMY_DATABASE_URL = 'sqlite:///./blog.db'

engine = create_engine(SQLALCHAMY_DATABASE_URL, connect_args={
                       "check_same_thread": False})

SessionLocal = sessionmaker(bind=engine, autocommit=False, autoflush=False,)

Base = declarative_base()



========================================================

db: Session = Depends(get_db)

- Session is not a Pydantic thing.
- Depends() converts the Session into pydantic.





